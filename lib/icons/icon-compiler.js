"use strict";

const fs             = require("fs");
const path           = require("path");
const CoffeeScript   = require("coffee-script");
const IconDefinition = require("./icon-definition.js");
const {isString, isRegExp, escapeRegExp} = require("../utils/general.js");

const SOURCE_FILE    = path.join(__dirname, "..", "..", "config.cson");
const OUTPUT_FILE    = path.join(__dirname, ".icondb.js");


/**
 * Interface for generating precompiled arrays of icon data.
 *
 * @class
 */
class IconCompiler{
	
	/**
	 * Recompile the package's icon database.
	 *
	 * Porcelain method to simplify config regeneration.
	 * @public
	 */
	recompile(){
		this.compileConfig(SOURCE_FILE, OUTPUT_FILE);
	}
	
	
	/**
	 * Compile working icon data from a CSON config file.
	 *
	 * @example compile("./config.cson", "./lib/service/.config.json");
	 * @param {String} configPath - Path to CSON source
	 * @param {String} outputPath - Path of compiled output
	 */
	compileConfig(configPath, outputPath){
		const configSource = fs.readFileSync(configPath).toString();
		const configData   = CoffeeScript.eval(configSource);
		const compiledData = this.compileConfigData(configData);
		
		// Generate icon tables
		let output =
			'"use strict"; // Auto-generated by compiler. DO NOT EDIT. Seriously.\n' +
			"module.exports = [";

		let comma = "";
		for(const listName in compiledData){
			const [iconList, indexList] = compiledData[listName];
			output += comma
				+ "\n[["
				+ iconList.join(",\n")
				+ "],\n"
				+ JSON.stringify(indexList)
				+ "]";
			comma = ",";
		}
		output += "\n];\n";
		fs.writeFileSync(outputPath, output);
	}
	
	
	/**
	 * Wrapper method to compile and arrange each list of icon data.
	 *
	 * Necessary due to the distinction made between directory and file icons.
	 *
	 * @param {Object} config - The JSON blob evaluated by CoffeeScript
	 * @return {Object}
	 */
	compileConfigData(config){
		const directoryIcons = this.compileList(config.directoryIcons);
		const fileIcons      = this.compileList(config.fileIcons);
		return this.indexLists({directoryIcons, fileIcons});
	}
	
	
	/**
	 * Generate a list of {@link IconDefinition} instances.
	 *
	 * @param {Object} input - Object hash parsed from JSON data.
	 * @return {IconDefinition[]} Array of icon definitions.
	 */
	compileList(input){
		const result = [];
		
		for(const key in input){
			const defs = this.compileEntry(key, input[key]);
			const name = key.toLowerCase();
			defs.forEach((def, order) => def._tmp = {name, order});
			result.push(... defs);
		}
		
		return result
			.sort((a, b) => {
				if(a.priority > b.priority) return -1;
				if(a.priority < b.priority) return 1;
				const A = a._tmp;
				const B = b._tmp;
				if(A.name < B.name) return -1;
				if(A.name > B.name) return 1;
				if(A.order < B.order) return -1;
				if(A.order > B.order) return 1;
				return 0;
			});
	}
	
	
	/**
	 * Compile a single config entry.
	 *
	 * Used internally by {@link IconCompiler#compileList}.
	 *
	 * @param {String} key
	 * @param {Object} value
	 * @return {Array}
	 * @private
	 */
	compileEntry(key, value){
		value = Object.assign({}, value);
		let {icon, match} = value;
		
		if(!Array.isArray(match)){
			const props = this.parseExtraProps(value);
			if(!props.noSuffix) icon += "-icon";
			match = this.parseMatchPattern(match, props.matchPath);
			return [ new IconDefinition(key, icon, match, value.colour, props) ];
		}
		
		const output = [];
		
		for(const i of match){
			let [match, colour, props] = i;
			
			const entryProps = this.parseExtraProps(props);
			props            = Object.assign({}, value, entryProps);
			match            = this.parseMatchPattern(match, props.matchPath);
			
			const entryIcon  = icon + (props.noSuffix ? "" : "-icon");
			const newIcon    = new IconDefinition(key, entryIcon, match, colour, props);
			const prevIcon   = output.find(def => this.canMergeDefinitions(def, newIcon));
			
			if(prevIcon)
				prevIcon.merge(newIcon);
			else
				output.push(newIcon);
			
			if(!entryProps.interpreter) delete value.interpreter;
			if(!entryProps.scope)       delete value.scope;
			if(!entryProps.alias)       delete value.alias;
		}
		
		return output;
	}
	
	
	/**
	 * Resolve the tertiary parameter for specifying additional properties.
	 *
	 * @param {String|Object} input
	 * @private
	 */
	parseExtraProps(input){
		
		// Ignore blank input
		if(!input) return {};
		
		// Strings are shorthand to set 3 common properties at once
		if(isString(input))
			return {
				alias: input,
				scope: input,
				interpreter: input
			};
		
		const output = {};
		
		// Assign every property that's supported here
		output.priority    = input.priority == null ? 1 : input.priority;
		output.alias       = input.alias;
		output.scope       = input.scope;
		output.interpreter = input.interpreter;
		output.matchPath   = input.matchPath;
		output.signature   = input.signature;
		
		if(input.generic)  output.generic  = true;
		if(input.noFuzz)   output.noFuzz   = true;
		if(input.noSuffix) output.noSuffix = true;
		
		return output;
	}
	
	
	/**
	 * Resolve an icon's path-matching pattern.
	 *
	 * @param {String|RegExp} input
	 * @param {Boolean} fixSeparators
	 * @return {RegExp}
	 * @private
	 */
	parseMatchPattern(input, fixSeparators = false){
		if(isRegExp(input))
			return input;
		
		if(!fixSeparators)
			return new RegExp(escapeRegExp(input) + "$", "i");
		
		input = input.split(/[\\\/]+/).map(s => escapeRegExp(s)).join("[\\\\\\/]");
		return new RegExp(input + "$", "i");
	}
	
	
	/**
	 * Check if two {@link IconDefinitions} can be merged together.
	 *
	 * @param {IconDefinition} input
	 * @return {Boolean}
	 */
	canMergeDefinitions(a, b){
		if(a.icon        !=  b.icon)        return false;
		if(a.colour[0]   !== b.colour[0])   return false;
		if(a.colour[1]   !== b.colour[1])   return false;
		if(a.priority    !=  b.priority)    return false;
		if(a.match.flags !== b.match.flags) return false;
		if(!!a.matchPath !== !!b.matchPath) return false;
		
		for(const name of ["alias", "scope", "interpreter", "signature"]){
			const A = a[name];
			const B = b[name];
			if(A && (B && (B.source !== A.source || B.flags !== A.flags))) return false;
			if(B && (A && (A.source !== B.source || A.flags !== B.flags))) return false;
		}
		return true;
	}
	
	
	/**
	 * Index each icon which supports special match criteria.
	 *
	 * @param {Object} lists
	 * @return {Object}
	 */
	indexLists(lists){
		const INTERPRETERS = 0x000;
		const LANGUAGES    = 0x001;
		const FULLPATHS    = 0x002;
		const SCOPES       = 0x003;
		const SIGNATURES   = 0x004;
		const result       = {};
		for(const name in lists){
			const indexes  = [[], [], [], [], []];
			const icons    = lists[name];
			let offset     = 0;
			for(const icon of icons){
				if(icon.interpreter) indexes[INTERPRETERS].push(offset);
				if(icon.lang)        indexes[LANGUAGES].push(offset);
				if(icon.matchPath)   indexes[FULLPATHS].push(offset);
				if(icon.scopes)      indexes[SCOPES].push(offset);
				if(icon.signature)   indexes[SIGNATURES].push(offset);
				++offset;
			}
			result[name] = [icons, indexes];
		}
		return result;
	}
}

Object.assign(IconCompiler.prototype, {
	
	/**
	 * Qualified path of package's CSON config.
	 * @constant {String} SOURCE_FILE
	 * @readonly
	 * @static
	 */
	SOURCE_FILE,
	
	/**
	 * Path to write generated output to when compiling.
	 * @constant {String} OUTPUT_FILE
	 * @readonly
	 * @static
	 */
	OUTPUT_FILE
});

module.exports = new IconCompiler();
